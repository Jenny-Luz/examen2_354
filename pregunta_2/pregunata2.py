# -*- coding: utf-8 -*-
"""pregunata2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_jqlNBUQ8MGy1l91iQqQZ7KH9_dRpHmz
"""

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

iris = load_iris()
X = iris.data
y = iris.target.reshape(-1, 1)

encoder = OneHotEncoder(sparse=False)
y = encoder.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

def initialize_weights(input_size, hidden_size, output_size):
    W1 = np.random.randn(input_size, hidden_size)
    b1 = np.zeros((1, hidden_size))
    W2 = np.random.randn(hidden_size, output_size)
    b2 = np.zeros((1, output_size))
    return W1, b1, W2, b2

def step_function(x):
    return np.where(x > 0, 1, 0)

def step_function_derivative(x):
    return np.ones_like(x)

def train(X, y, W1, b1, W2, b2, learning_rate, max_epochs):
    for epoch in range(max_epochs):

        z1 = np.dot(X, W1) + b1
        a1 = step_function(z1)
        z2 = np.dot(a1, W2) + b2
        a2 = step_function(z2)

        error = y - a2
        loss = np.mean(np.square(error))
        if epoch % 100 == 0:
            print(f'Epoch {epoch}, Loss: {loss}')

        d_z2 = error * step_function_derivative(a2)
        d_W2 = np.dot(a1.T, d_z2)
        d_b2 = np.sum(d_z2, axis=0, keepdims=True)

        d_z1 = np.dot(d_z2, W2.T) * step_function_derivative(a1)
        d_W1 = np.dot(X.T, d_z1)
        d_b1 = np.sum(d_z1, axis=0, keepdims=True)

        W2 += learning_rate * d_W2
        b2 += learning_rate * d_b2
        W1 += learning_rate * d_W1
        b1 += learning_rate * d_b1

    return W1, b1, W2, b2

input_size = X_train.shape[1]
hidden_size = 5
output_size = y_train.shape[1]
learning_rate = 0.2
max_epochs = 1000

W1, b1, W2, b2 = initialize_weights(input_size, hidden_size, output_size)

W1, b1, W2, b2 = train(X_train, y_train, W1, b1, W2, b2, learning_rate, max_epochs)

def predict(X, W1, b1, W2, b2):
    z1 = np.dot(X, W1) + b1
    a1 = step_function(z1)
    z2 = np.dot(a1, W2) + b2
    a2 = step_function(z2)
    return np.argmax(a2, axis=1)

predictions = predict(X_test, W1, b1, W2, b2)
y_test_labels = np.argmax(y_test, axis=1)

accuracy = np.mean(predictions == y_test_labels)
print(f'Accuracy: {accuracy * 100:.2f}%')