# -*- coding: utf-8 -*-
"""pregunata3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_jqlNBUQ8MGy1l91iQqQZ7KH9_dRpHmz
"""

import numpy as np

np.random.seed(42)
num_cities = 10
cities = np.random.rand(num_cities, 2)

def euclidean_distance(city1, city2):
    return np.sqrt(np.sum((city1 - city2)**2))

distances = np.zeros((num_cities, num_cities))
for i in range(num_cities):
    for j in range(num_cities):
        if i != j:
            distances[i, j] = euclidean_distance(cities[i], cities[j])

def total_distance(route):
    distance = 0
    for i in range(len(route)):
        distance += distances[route[i - 1], route[i]]
    return distance


initial_route = np.random.permutation(num_cities)
print("Initial route:", initial_route)
print("Initial total distance:", total_distance(initial_route))

def generate_neighbors(route):
    neighbors = []
    for i in range(len(route)):
        for j in range(i + 1, len(route)):
            neighbor = route.copy()
            neighbor[i], neighbor[j] = neighbor[j], neighbor[i]
            neighbors.append(neighbor)
    return neighbors

def local_search(initial_route):
    current_route = initial_route
    current_distance = total_distance(current_route)
    improved = True

    while improved:
        improved = False
        neighbors = generate_neighbors(current_route)

        for neighbor in neighbors:
            neighbor_distance = total_distance(neighbor)
            if neighbor_distance < current_distance:
                current_route = neighbor
                current_distance = neighbor_distance
                improved = True
                break

    return current_route, current_distance

best_route, best_distance = local_search(initial_route)
print("Best route found:", best_route)
print("Best total distance:", best_distance)