# -*- coding: utf-8 -*-
"""pregunata4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_jqlNBUQ8MGy1l91iQqQZ7KH9_dRpHmz
"""

import numpy as np

np.random.seed(42)
num_cities = 10
cities = np.random.rand(num_cities, 2)

def euclidean_distance(city1, city2):
    return np.sqrt(np.sum((city1 - city2)**2))

distances = np.zeros((num_cities, num_cities))
for i in range(num_cities):
    for j in range(num_cities):
        if i != j:
            distances[i, j] = euclidean_distance(cities[i], cities[j])

def total_distance(route):
    distance = 0
    for i in range(len(route)):
        distance += distances[route[i - 1], route[i]]
    return distance

import random

def swap_cities(route):
    a, b = random.sample(range(len(route)), 2)
    route[a], route[b] = route[b], route[a]
    return route

def simulated_annealing(initial_route, initial_temp, cooling_rate, max_iter):
    current_route = initial_route
    current_distance = total_distance(current_route)
    best_route = current_route
    best_distance = current_distance
    temperature = initial_temp

    for iteration in range(max_iter):
        new_route = swap_cities(current_route.copy())
        new_distance = total_distance(new_route)

        if new_distance < current_distance or random.random() < np.exp((current_distance - new_distance) / temperature):
            current_route = new_route
            current_distance = new_distance

            if current_distance < best_distance:
                best_route = current_route
                best_distance = current_distance

        temperature *= cooling_rate

        if iteration % 100 == 0:
            print(f'Iteration {iteration}, Current Distance: {current_distance}, Best Distance: {best_distance}')

    return best_route, best_distance

initial_temp = 1000
cooling_rate = 0.99
max_iter = 10000

initial_route = np.random.permutation(num_cities)
print("Initial route:", initial_route)
print("Initial total distance:", total_distance(initial_route))

best_route, best_distance = simulated_annealing(initial_route, initial_temp, cooling_rate, max_iter)
print("Best route found:", best_route)
print("Best total distance:", best_distance)